Development environment: Chrome (on windows), vim, Node.JS on Debian

Stage 1 (necessary requirements)
- make chat view: list and form
- add function to select latest chat message and scroll into view if needed (use css :last) (runs on rerender this route)
- add onsubmit to form to send message
- add onmessage handler to redraw whole app
- and onhashchange handler to redraw whole app (for settings/chat routes)
- add title blinking effect if tab is not active
- add form to settings page
- add onsubmit to that form to save to localstorage
- add function to load settings from localstorage (runs on rerender this route)
- add a default settings static object
- add css to fulfill minimal requirements (my message right, others messages left, responsive, landscape/portrait, light/dark mode)
- add readme with features (required and optional sections)
- add tests layer 1 (use typescript, types for message, settings)
- add tests layer 2 (basic unit tests, client: new message makes list longer by 1, server: new ws connection makes members longer by 1)
- test in Firefox, and Safari

Stage 2 (my own improvement)
- perfect markup (accessible, semantic, minimal)
- improve css (use classless css reset, factor out themeable variables)
- format code nicely
- optional ideas 1: add ephemeral key to messages, being the number of seconds they exist from delivery, after which they are deleted
- optional ideas 2: add encrypted flag to messages, indicating the message has been e2-encrypted using a password (private key, participants must share out of channel) [[do not implement]]
- optional ideas 3: add a room list route (a view that just lists names of members in the room), and a room count on the chat route (number of members) [[do not implement]]
- optional ideas 4: add a door list (in other words, you cannot get in unless your member name is on the list) [[do not implement]]

Stage 3 (selected optional requirements)
- Add unread count to title 
- Add emoji keyboard (use emoji-button https://emoji-button.js.org/)
- Add chinese language setting (simple messages.json)

Submission 
- Double check app against all requirements
- Document instructions in README
- Submit
